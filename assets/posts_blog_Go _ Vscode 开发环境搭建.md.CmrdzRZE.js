import{_ as a,c as i,o as s,aP as t}from"./chunks/framework.CpK_9rKb.js";const u=JSON.parse('{"title":"Go + Vscode 开发环境搭建","description":"Go + Vscode 开发环境搭建","frontmatter":{"title":"Go + Vscode 开发环境搭建","description":"Go + Vscode 开发环境搭建","date":"2023-10-21T00:00:00.000Z","tags":["GO"]},"headers":[],"relativePath":"posts/blog/Go + Vscode 开发环境搭建.md","filePath":"posts/blog/Go + Vscode 开发环境搭建.md"}'),e={name:"posts/blog/Go + Vscode 开发环境搭建.md"},o=t(`<h2 id="零、前言" tabindex="-1">零、前言 <a class="header-anchor" href="#零、前言" aria-label="Permalink to &quot;零、前言&quot;">​</a></h2><p>最近萌生了想要转型的想法，来学一门后端语言，之前是用 node 作为后端语言，平常做做小项目用 node 还是挺方便的，但是考虑到国内招 node 的岗位不多，Java 卷的缘故，而且听说 go 做后端在性能方面有较大的提升，就打算来尝试学习一下。</p><p>结果，万事开头难，上来安装就给网上五花八门的博客给拦住了，就自己查找资料记录了一下。</p><h2 id="一、前提准备" tabindex="-1">一、前提准备 <a class="header-anchor" href="#一、前提准备" aria-label="Permalink to &quot;一、前提准备&quot;">​</a></h2><blockquote><p>这里需要安装三个准备工具 git、go、vscode，下面是三个安装包的官方地址，本文主要是 Go 的安装教程，所以这里就不介绍 git、vscode 的安装了。</p></blockquote><p>官方地址：</p><ul><li>Git：<a href="https://gitforwindows.org/" target="_blank" rel="noreferrer">Git for Windows</a>，推荐国内镜像：<a href="https://registry.npmmirror.com/binary.html?path=git-for-windows/" target="_blank" rel="noreferrer">CNPM Binaries Mirror (npmmirror.com)</a></li><li>Vscode：<a href="https://code.visualstudio.com/" target="_blank" rel="noreferrer">Visual Studio Code - Code Editing. Redefined</a></li><li>Go：后边介绍</li></ul><h2 id="二、环境安装" tabindex="-1">二、环境安装 <a class="header-anchor" href="#二、环境安装" aria-label="Permalink to &quot;二、环境安装&quot;">​</a></h2><h3 id="_1-安装-go-环境" tabindex="-1">1. 安装 go 环境 <a class="header-anchor" href="#_1-安装-go-环境" aria-label="Permalink to &quot;1. 安装 go 环境&quot;">​</a></h3><blockquote><p>根据自己的需要选择相应的版本，我的是 win10 64bit 系统，安装包为<code>go1.20.3.windows-arm64.msi</code></p></blockquote><ul><li><p>下载地址</p><ul><li>官方地址：<a href="https://golang.org/dl/" target="_blank" rel="noreferrer">https://golang.org/dl/</a></li><li>打开较慢可以用这个：<a href="https://golang.google.cn/dl/" target="_blank" rel="noreferrer">https://golang.google.cn/dl/</a></li></ul></li><li><p>各个系统对应的包名</p></li></ul><table><thead><tr><th>操作系统</th><th>包名</th></tr></thead><tbody><tr><td>Windows</td><td>go1.20.3.windows-amd64.msi</td></tr><tr><td>Linux</td><td>go1.20.3.linux-amd64.tar.gz</td></tr><tr><td>Mac</td><td>go1.20.3.darwin-amd64-osx10.8.pkg</td></tr></tbody></table><ul><li>安装方法 <ul><li>打开 msi 包，选择自己想要安装的目录，无脑下一步即可。</li></ul></li></ul><h3 id="_2-配置环境变量" tabindex="-1">2. 配置环境变量 <a class="header-anchor" href="#_2-配置环境变量" aria-label="Permalink to &quot;2. 配置环境变量&quot;">​</a></h3><blockquote><p>默认情况下，最新版本的 Go 环境会自动帮你配置好环境变量。若没有，配置方法也很简单。</p></blockquote><p>打开 此电脑 -&gt; （右键）属性 - 高级系统设置 - 环境变量 - 双击 path 变量，新增变量路径（这里我的是<code>C:\\Program Files\\Go\\bin</code>，根据自己安装的 go 的 bin 目录位置决定）</p><p>打开控制台（win+r，输入 cmd，回车），输入 go version，就可以看到 go 的版本信息了。</p><p><img src="https://qiniu.ustinian077.top/image-20230412111807414.png" alt="image-20230412111807414" data-fancybox="gallery"></p><h3 id="_3-配置-gopath-工作目录-可跳过" tabindex="-1">3. 配置 GOPATH 工作目录（可跳过） <a class="header-anchor" href="#_3-配置-gopath-工作目录-可跳过" aria-label="Permalink to &quot;3. 配置 GOPATH 工作目录（可跳过）&quot;">​</a></h3><blockquote><p>在 1.11 版本之前，开发的时候需要将依赖包引入到<code>$GOPATH/src</code>下，为了管理自己的包和源码，就需要去配置 GOPATH。在 1.11 版本之后，推出了一种新的方式 go mod（modules）去管理，它跟 npm 很像，可以通过命令行的方式去管理依赖，而无需将源码移动到 GOPATH 工作目录下去开发。</p></blockquote><p>自定义创建 GOPATH 目录，例如：E:\\gowork，并在目录下创建 src、pkg、bin 三个文件夹。</p><p><img src="https://qiniu.ustinian077.top/1235697-20190218223030338-1867662830.png" alt="img" data-fancybox="gallery"></p><p>打开 我的电脑 - （右键）属性 - 高级系统设置 - 环境变量，新增一个系统环境变量 GOPATH。</p><p><img src="https://qiniu.ustinian077.top/1235697-20190218225425690-1353699465.png" alt="img" data-fancybox="gallery"></p><p>打开控制台(win+r,输入 cmd，按回车)，输入 go env 查看 go 配置信息，</p><p><img src="https://qiniu.ustinian077.top/1235697-20190218230016332-1394149958.png" alt="img" data-fancybox="gallery"></p><blockquote><p>注意：如果 GOPATH 没有变成我们配置的路径，可以重启下电脑 or 等，至于为什么，不清楚~，大概是系统还没更新到最新的参数吧。</p></blockquote><h3 id="_4-常用的-god-mod-命令" tabindex="-1">4. 常用的 god mod 命令 <a class="header-anchor" href="#_4-常用的-god-mod-命令" aria-label="Permalink to &quot;4. 常用的 god mod 命令&quot;">​</a></h3><h2 id="三、vscode-的-go-环境搭建" tabindex="-1">三、Vscode 的 Go 环境搭建 <a class="header-anchor" href="#三、vscode-的-go-环境搭建" aria-label="Permalink to &quot;三、Vscode 的 Go 环境搭建&quot;">​</a></h2><ol><li>安装拓展</li></ol><p>点击 Extensions - 搜索 Go - 下载</p><p><img src="https://qiniu.ustinian077.top/image-20230412144953871.png" alt="image-20230412144953871" data-fancybox="gallery"></p><ol start="2"><li>安装第三方依赖</li></ol><p>创建一个<code>hello.go</code>文件，内容如下： git</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fmt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	fmt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello world!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>此时，当你保存文件的时候会有提示要安装第三方依赖，点击 install all 即可。或者在 Vscode 里面按下<code>ctrl+shift+p</code>键找到<code>Go:Install/Update Tools</code>，勾选所有，点击 OK 即可。</p><p><img src="https://qiniu.ustinian077.top/image-20230412145329956.png" alt="image-20230412145329956" data-fancybox="gallery"></p><ol start="3"><li>全球模块代理</li></ol><blockquote><p>如果，上面速度很慢，安装失败的话，可以尝试开启全球模块代理来下载。</p></blockquote><p>在桌面按住<code>shift</code>右键打开<code>Powershell</code>窗口，输入以下内容：</p><div class="language-cmd vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$env:GO111MODULE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">“on”</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$env:GOPROXY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">“https://goproxy.io”</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">go env </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">w GOPROXY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">https://goproxy.io,direct</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">go env </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">w GOPRIVATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.corp.example.com</span></span></code></pre></div><p>接着再重复上面安装的操作即可。</p>`,42),l=[o];function n(p,r,h,d,c,g){return s(),i("div",null,l)}const m=a(e,[["render",n]]);export{u as __pageData,m as default};
